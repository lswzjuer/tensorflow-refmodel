%Generated by Gen_MATLAB_CNNs_param.py

clear
clc

% % % workspace = getenv("WORKSPACE");
% % % global matlab_export_dir = strcat(workspace,"/verif/sim/");
% % % jsonlab_path = strcat(workspace,"/verif/compiler/utils/jsonlab-1.5");
% % % addpath(jsonlab_path);
% % % function r = write_json(filename, structure)
% % %     global matlab_export_dir;
% % %     filepath = strcat(matlab_export_dir,filename);
% % %     fidr = fopen(filepath,'w');
% % %     json_str = savejson('',structure);
% % %     fprintf(fidr,"%s", json_str);
% % %     fclose(fidr);
% % %     r=1;
% % % end


%% *************************************************************** CNN model parameters ***************************************************************
% Generated by Gen_MATLAB_DLA_param.py
% use: ../../models/fabu/pvanet_od_roip8/DLA2.0_roip8_quantity_PLMX.prototxt

NUM_CONV = 67; % CONV includes normal convolution and depthwise convolution
NUM_DECV = 0; % DEConVolution (deconv) or transposed convolution
NUM_NEAR = 1; % Nearest-neighbor interpolation
NUM_PLMX = 4; % PooLing MaX layer
NUM_GAPL = 0; % Global AVerage Pooling layer
NUM_ROIP = 1; % ROIPooling layer
NUM_PROP = 1; % PROPosal layer
NUM_EWIS = 0; % Element-WISe layer
NUM_FCON = 6; % Fully-CONnected layer
NUM_LAYER = NUM_CONV+NUM_DECV+NUM_NEAR+NUM_PLMX+NUM_GAPL+NUM_ROIP+NUM_PROP+NUM_EWIS+NUM_FCON;

%             1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,
NKX_CONV  = [ 4, 3, 3, 1, 1, 3, 1, 3, 3, 1, 1, 3, 1, 3, 3, 1, 1, 3, 1, 3, 3, 1, 1, 3, 1, 3, 3, 1, 1, 3, 1, 3, 3, 1, 1, 5, 1, 5, 5, 1, 1, 5, 1, 5, 5, 1, 1, 5, 1, 5, 5, 1, 1, 5, 1, 5, 5, 1, 1, 5, 1, 5, 5, 1, 1, 1, 1,]';
NKY_CONV  = [ 4, 3, 3, 1, 1, 3, 1, 3, 3, 1, 1, 3, 1, 3, 3, 1, 1, 3, 1, 3, 3, 1, 1, 3, 1, 3, 3, 1, 1, 3, 1, 3, 3, 1, 1, 5, 1, 5, 5, 1, 1, 5, 1, 5, 5, 1, 1, 5, 1, 5, 5, 1, 1, 5, 1, 5, 5, 1, 1, 5, 1, 5, 5, 1, 1, 1, 1,]';
PAD_CONV  = [ 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 2, 0, 2, 2, 0, 0, 2, 0, 2, 2, 0, 0, 2, 0, 2, 2, 0, 0, 2, 0, 2, 2, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0,]';
STR_CONV  = [ 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,]';
NKI_CONV0 = [ 3,32,48,96,96,16,96,16,32,192,192,16,192,16,32,192,192,16,192,16,32,192,192,16,192,16,32,192,192,16,192,16,32,192,192,32,192,16,32,256,256,32,256,16,32,256,256,32,256,16,32,256,256,32,256,16,32,256,256,32,256,16,32,544,256,256,256,]'; % # of input kernel maps
NIF_CONV0 = [ 3,32,48,96,96,16,96,16,32,192,192,16,192,16,32,192,192,16,192,16,32,192,192,16,192,16,32,192,192,16,192,16,32,192,192,32,192,16,32,256,256,32,256,16,32,256,256,32,256,16,32,256,256,32,256,16,32,256,256,32,256,16,32,544,256,256,256,]';
NOF_CONV0 = [32,48,96,96,16,64,16,32,32,96,16,64,16,32,32,96,16,64,16,32,32,96,16,64,16,32,32,96,16,64,16,32,32,128,32,96,16,32,32,128,32,96,16,32,32,128,32,96,16,32,32,128,32,96,16,32,32,128,32,96,16,32,32,256,256,98/2,196,]';
NIX_CONV0 = [800,400,200,50,100,100,100,100,100,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]';
NIY_CONV0 = [1280,640,320,80,160,160,160,160,160,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]';
NOX_CONV0 = [400,200,100,50,100,50,100,100,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]';
NOY_CONV0 = [640,320,160,80,160,80,160,160,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]';

NKX_DECV  = []';
NKY_DECV  = []';
PAD_DECV  = []';
STR_DECV  = []'; % Deconv stride (Internal Zero Padding Size) 
NKI_DECV0 = []';
NIF_DECV0 = []';
NOF_DECV0 = []';
NIX_DECV0 = []';
NIY_DECV0 = []';
NOX_DECV0 = []';
NOY_DECV0 = []';

STR_NEAR  = [ 2,]';
NIF_NEAR0 = [256,]';
NOF_NEAR0 = [256,]';
NIX_NEAR0 = [50,]';
NIY_NEAR0 = [80,]';
NOX_NEAR0 = [101,]';
NOY_NEAR0 = [161,]';

NKX_PLMX  = [ 3, 3, 3, 4,]';
NKY_PLMX  = [ 3, 3, 3, 4,]';
PAD_PLMX  = [ 0, 1, 0, 1,]';
STR_PLMX  = [ 2, 1, 2, 1,]';
NIF_PLMX0 = [96,192,96,256,]';
NOF_PLMX0 = [96,192,96,256,]';
NIX_PLMX0 = [100,50,100,101,]';
NIY_PLMX0 = [160,80,160,161,]';
NOX_PLMX0 = [50,50,50,100,]';
NOY_PLMX0 = [80,80,80,160,]';

NOX_ROIP0 = [ 6,]';
NOY_ROIP0 = [ 6,]';
NOF_ROIP0 = [256,]';
NBX_ROIP0 = [300,]'; % # of ROIs or anchor boxes


WD_DIV = 16;
NKX_GAPL  = []';
NKY_GAPL  = []';
NIX_GAPL0 = []';
NIY_GAPL0 = []';
NIF_GAPL0 = []';
NOF_GAPL0 = []';

NIF_EWIS0 = []';
NOF_EWIS0 = []';
NIX_EWIS0 = []';
NIY_EWIS0 = []';
NOX_EWIS0 = []';
NOY_EWIS0 = []';

NIF_FCON0 = [NOX_ROIP0(1)*NOY_ROIP0(1)*256; 512;4096; 128;4096;4096;]; % Warning check NIF of 1st FCON
NOF_FCON0 = [                          512;4096; 128;4096;  08;  32;];
NBX_FCON0 = [                          300; 300; 300; 300; 300; 300;]; % # of ROIs or anchor boxes


%                    1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
CR_LAYER_IS_CONV = [ 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,];
CR_LAYER_IS_DECV = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,];
CR_LAYER_IS_NEAR = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,];
CR_LAYER_IS_PLMX = [ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,];
CR_LAYER_IS_ROIP = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,];
CR_LAYER_IS_PROP = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,];
CR_LAYER_IS_GAPL = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,];
CR_LAYER_IS_EWIS = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,];
CR_LAYER_IS_FCON = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,];

CR_LAYER_IS_DWIS = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,];

CR_CONV_with_ReLU = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0]';
CR_EWIS_with_ReLU = []';
CR_FCON_with_ReLU = [0,1,0,1,0,0]';
CR_CONV_with_Bias = ones(NUM_CONV,1);
CR_FCON_with_Bias = ones(NUM_FCON,1);

CR_CONV_MACOUT_RSBIT_CV = 7*ones(NUM_CONV,1);
CR_DECV_MACOUT_RSBIT_CV = 7*ones(NUM_DECV,1);
CR_FCON_MACOUT_RSBIT_FC = 7*ones(NUM_FCON,1); % FCON MAC output right shift bits


% Support MAX number of input layers of 16! 
input_layers_ID{001} = [0,]; % Assume 1st layer only read from image
input_layers_ID{002} = [1,];
input_layers_ID{003} = [2,];
input_layers_ID{004} = [3,];
input_layers_ID{005} = [4,];
input_layers_ID{006} = [3,];
input_layers_ID{007} = [6,];
input_layers_ID{008} = [3,];
input_layers_ID{009} = [8,];
input_layers_ID{010} = [9,];
input_layers_ID{011} = [5,7,10,];
input_layers_ID{012} = [5,7,10,];
input_layers_ID{013} = [12,];
input_layers_ID{014} = [5,7,10,];
input_layers_ID{015} = [14,];
input_layers_ID{016} = [15,];
input_layers_ID{017} = [11,13,16,];
input_layers_ID{018} = [11,13,16,];
input_layers_ID{019} = [18,];
input_layers_ID{020} = [11,13,16,];
input_layers_ID{021} = [20,];
input_layers_ID{022} = [21,];
input_layers_ID{023} = [17,19,22,];
input_layers_ID{024} = [17,19,22,];
input_layers_ID{025} = [24,];
input_layers_ID{026} = [17,19,22,];
input_layers_ID{027} = [26,];
input_layers_ID{028} = [27,];
input_layers_ID{029} = [23,25,28,];
input_layers_ID{030} = [23,25,28,];
input_layers_ID{031} = [30,];
input_layers_ID{032} = [23,25,28,];
input_layers_ID{033} = [32,];
input_layers_ID{034} = [33,];
input_layers_ID{035} = [29,31,34,];
input_layers_ID{036} = [35,];
input_layers_ID{037} = [29,31,34,];
input_layers_ID{038} = [37,];
input_layers_ID{039} = [29,31,34,];
input_layers_ID{040} = [39,];
input_layers_ID{041} = [40,];
input_layers_ID{042} = [36,38,41,];
input_layers_ID{043} = [36,38,41,];
input_layers_ID{044} = [43,];
input_layers_ID{045} = [36,38,41,];
input_layers_ID{046} = [45,];
input_layers_ID{047} = [46,];
input_layers_ID{048} = [42,44,47,];
input_layers_ID{049} = [42,44,47,];
input_layers_ID{050} = [49,];
input_layers_ID{051} = [42,44,47,];
input_layers_ID{052} = [51,];
input_layers_ID{053} = [52,];
input_layers_ID{054} = [48,50,53,];
input_layers_ID{055} = [48,50,53,];
input_layers_ID{056} = [55,];
input_layers_ID{057} = [48,50,53,];
input_layers_ID{058} = [57,];
input_layers_ID{059} = [58,];
input_layers_ID{060} = [54,56,59,];
input_layers_ID{061} = [54,56,59,];
input_layers_ID{062} = [61,];
input_layers_ID{063} = [54,56,59,];
input_layers_ID{064} = [63,];
input_layers_ID{065} = [64,];
input_layers_ID{066} = [3,];
input_layers_ID{067} = [66,29,31,34,60,62,65,];
input_layers_ID{068} = [67,];
input_layers_ID{069} = [68,];
input_layers_ID{070} = [67,];
input_layers_ID{071} = [70,];
input_layers_ID{072} = [70,];
input_layers_ID{073} = [71,72,];
input_layers_ID{074} = [69,73,];
input_layers_ID{075} = [74,];
input_layers_ID{076} = [75,];
input_layers_ID{077} = [76,];
input_layers_ID{078} = [77,];
input_layers_ID{079} = [78,];
input_layers_ID{080} = [78,];


% ------------------------------ PROP parameters ------------------------------
BIT_frac_ANCHOR      = 4;
num_anchors          = 49*ones(NUM_PROP,1);
CR_PROP_ANCHOR_CTR_X = 7.5*2^BIT_frac_ANCHOR*ones(NUM_PROP,1); % 16-bit
CR_PROP_ANCHOR_CTR_Y = 7.5*2^BIT_frac_ANCHOR*ones(NUM_PROP,1); % 16-bit
CR_PROP_ANCHOR_W     = zeros(NUM_PROP,64);     % 64*16-bit
CR_PROP_ANCHOR_H     = zeros(NUM_PROP,64);     % 64*16-bit
CR_PROP_ANCHOR_W(1,1:num_anchors(1)) = [  13.500,  27.000,  54.000,  81.000, 144.000, 288.000, 432.000,  18.000,  36.000,  72.000, 108.000, 192.000, 384.000, 576.000,  19.500,  39.000,  78.000, 117.000, 208.000, 416.000, 624.000,  24.000,  48.000,  96.000, 144.000, 256.000, 512.000, 768.000,  30.000,  60.000, 120.000, 180.000, 320.000, 640.000, 960.000,  33.000,  66.000, 132.000, 198.000, 352.000, 704.000,1056.000,  40.500,  81.000, 162.000, 243.000, 432.000, 864.000,1296.000]*2^BIT_frac_ANCHOR;
CR_PROP_ANCHOR_H(1,1:num_anchors(1)) = [  42.000,  84.000, 168.000, 252.000, 448.000, 896.000,1344.000,  34.500,  69.000, 138.000, 207.000, 368.000, 736.000,1104.000,  30.000,  60.000, 120.000, 180.000, 320.000, 640.000, 960.000,  24.000,  48.000,  96.000, 144.000, 256.000, 512.000, 768.000,  19.500,  39.000,  78.000, 117.000, 208.000, 416.000, 624.000,  16.500,  33.000,  66.000,  99.000, 176.000, 352.000, 528.000,  13.500,  27.000,  54.000,  81.000, 144.000, 288.000, 432.000]*2^BIT_frac_ANCHOR;
CR_PROP_nms_threshold              = 90  *ones(NUM_PROP,1);
CR_PROP_num_anchors_per_buffer     = num_anchors;
CR_PROP_num_stddev                 = 2560*ones(NUM_PROP,1); %2560
CR_PROP_div_by_n_correction        = 64*ones(NUM_PROP,1);
CR_PROP_STRIDE                     = 4*ones(NUM_PROP,1); % log2(16)
% ------------------------------ PROP parameters ------------------------------



%% *************************************************************** Loop Tiling Sizes for On-chip Buffer ***************************************************************

              % 01; 02; 03;04; 05;06; 07; 08;09;10;11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;36;37;38;39;40;41;42;43;44;45;46;47;48;49;50;51;52;53;54;55;56;57;58;59;60;61;62;63;64;65;66;67; 
%NOY_CONV0 = [720;360;180;90;180;90;180;180;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;90;];
Toy_CONV0 = 8*ones(NUM_CONV,1);
Toy_CONV0 = min(Toy_CONV0, NOY_CONV0);

            %01;02;03;04;05;06;07;08;09;10;11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;26;27;28;29;30;31;32;33; 34;35;36;37;38;39; 40;41;42;43;44;45; 46;47;48;49;50;51; 52;53;54;55;56;57; 58;59;60;61;62;63; 64; 65; 66;67; 68; 
%NOF_CONV0= [32;48;96;96;16;64;16;32;32;96;16;64;16;32;32;96;16;64;16;32;32;96;16;64;16;32;32;96;16;64;16;32;32;128;32;96;16;32;32;128;32;96;16;32;32;128;32;96;16;32;32;128;32;96;16;32;32;128;32;96;16;32;32;256;256;256;98;196;];
Tof_CONV0 = NOF_CONV0;
Tof_CONV0 = min(Tof_CONV0, NOF_CONV0);

Toy_DECV0 = 8*ones(NUM_DECV,1);
Tof_DECV0 = [32;];

Toy_NEAR = [16]; %8*ones(NUM_DECV,1);
Tif_NEAR = [8];

%NIF_PLMX0=[96,192,96,256,]';
Tif_PLMX = [16; 16;16;  8]; % if FCON is after PLMX, Tif_PL = NIF_PL 
%NOY_PLMX0=[80,80,80,160,]';
Toy_PLMX = [40;40;40; 40]; % NOTE, for stride=1, pad=1 pooling, TOY_PL = NOY_PL

%NOY_EWIS0=[];
Toy_EWIS = [];

Tif_GAPL = [32;];
Tof_GAPL = Tif_GAPL;

Tif_PROP = [1;]; 
Toy_PROP = [1;];

Tof_ROIP = [16;]; 

NUM_FC_BOX = 64; % # of parallel computed boxes for FCON
Tbx_FCON = NUM_FC_BOX*ones(NUM_FCON,1);
Tif_FCON = NIF_FCON0; %Tof_FCON = POF_FCON;


%%
run ./CNN_compiler/DLA_size_x16y08f16.m
run ./CNN_compiler/Variants.m
run ./CNN_compiler/DMA_dpt_NoAlign.m % run 1st
run ./CNN_compiler/Param.m % run 2nd
run ./CNN_compiler/Param_LAYER.m % generate LAYER based configuration parameters
run ./CNN_compiler/Performance_Bosch.m
run ./CNN_compiler/csv_layer.m

% % % run ./CNN_compiler/cnn_emu_api.m

% save ("DDR3_BDEC_WRPX_pCVpM","DDR3_BDEC_WRPX_pCVpM");
% save ("DDR3_BDEC_WRPX_pPLpM","DDR3_BDEC_WRPX_pPLpM");
% save ("./CNN_compiler/DDR3_BDEC_WRPX_pCVpM","DDR3_BDEC_WRPX_pCVpM");
% save ("./CNN_compiler/DDR3_BDEC_WRPX_pPLpM","DDR3_BDEC_WRPX_pPLpM");

% load('./CNN_compiler/PVANET_ob_KN_BS_INT.mat')
% load('./CNN_compiler/FT_data_6images.mat')

%run ./CNN_compiler/Bias_Kernel_Image_sim.m

%run ./CNN_compiler/RAM_init.m

close('all')

%% ************************* Layer Information *************************

% LAYER(001) is CONV(001), conv1
% LAYER(002) is CONV(002), conv2
% LAYER(003) is CONV(003), conv3
% LAYER(004) is PLMX(001), inc3a/pool1
% LAYER(005) is CONV(004), inc3a/conv1
% LAYER(006) is CONV(005), inc3a/conv3_1
% LAYER(007) is CONV(006), inc3a/conv3_2
% LAYER(008) is CONV(007), inc3a/conv5_1
% LAYER(009) is CONV(008), inc3a/conv5_2
% LAYER(010) is CONV(009), inc3a/conv5_3
% LAYER(011) is CONV(010), inc3b/conv1
% LAYER(012) is CONV(011), inc3b/conv3_1
% LAYER(013) is CONV(012), inc3b/conv3_2
% LAYER(014) is CONV(013), inc3b/conv5_1
% LAYER(015) is CONV(014), inc3b/conv5_2
% LAYER(016) is CONV(015), inc3b/conv5_3
% LAYER(017) is CONV(016), inc3c/conv1
% LAYER(018) is CONV(017), inc3c/conv3_1
% LAYER(019) is CONV(018), inc3c/conv3_2
% LAYER(020) is CONV(019), inc3c/conv5_1
% LAYER(021) is CONV(020), inc3c/conv5_2
% LAYER(022) is CONV(021), inc3c/conv5_3
% LAYER(023) is CONV(022), inc3d/conv1
% LAYER(024) is CONV(023), inc3d/conv3_1
% LAYER(025) is CONV(024), inc3d/conv3_2
% LAYER(026) is CONV(025), inc3d/conv5_1
% LAYER(027) is CONV(026), inc3d/conv5_2
% LAYER(028) is CONV(027), inc3d/conv5_3
% LAYER(029) is CONV(028), inc3e/conv1
% LAYER(030) is CONV(029), inc3e/conv3_1
% LAYER(031) is CONV(030), inc3e/conv3_2
% LAYER(032) is CONV(031), inc3e/conv5_1
% LAYER(033) is CONV(032), inc3e/conv5_2
% LAYER(034) is CONV(033), inc3e/conv5_3
% LAYER(035) is PLMX(002), inc4a/pool1
% LAYER(036) is CONV(034), inc4a/conv1
% LAYER(037) is CONV(035), inc4a/conv3_1
% LAYER(038) is CONV(036), inc4a/conv3_2
% LAYER(039) is CONV(037), inc4a/conv5_1
% LAYER(040) is CONV(038), inc4a/conv5_2
% LAYER(041) is CONV(039), inc4a/conv5_3
% LAYER(042) is CONV(040), inc4b/conv1
% LAYER(043) is CONV(041), inc4b/conv3_1
% LAYER(044) is CONV(042), inc4b/conv3_2
% LAYER(045) is CONV(043), inc4b/conv5_1
% LAYER(046) is CONV(044), inc4b/conv5_2
% LAYER(047) is CONV(045), inc4b/conv5_3
% LAYER(048) is CONV(046), inc4c/conv1
% LAYER(049) is CONV(047), inc4c/conv3_1
% LAYER(050) is CONV(048), inc4c/conv3_2
% LAYER(051) is CONV(049), inc4c/conv5_1
% LAYER(052) is CONV(050), inc4c/conv5_2
% LAYER(053) is CONV(051), inc4c/conv5_3
% LAYER(054) is CONV(052), inc4d/conv1
% LAYER(055) is CONV(053), inc4d/conv3_1
% LAYER(056) is CONV(054), inc4d/conv3_2
% LAYER(057) is CONV(055), inc4d/conv5_1
% LAYER(058) is CONV(056), inc4d/conv5_2
% LAYER(059) is CONV(057), inc4d/conv5_3
% LAYER(060) is CONV(058), inc4e/conv1
% LAYER(061) is CONV(059), inc4e/conv3_1
% LAYER(062) is CONV(060), inc4e/conv3_2
% LAYER(063) is CONV(061), inc4e/conv5_1
% LAYER(064) is CONV(062), inc4e/conv5_2
% LAYER(065) is CONV(063), inc4e/conv5_3
% LAYER(066) is PLMX(003), downsample
% LAYER(067) is CONV(064), convf
% LAYER(068) is NEAR(001), convf_up2_Upsample
% LAYER(069) is PLMX(004), convf_up2_Depthwise
% LAYER(070) is CONV(065), rpn_conv1
% LAYER(071) is CONV(066), rpn_cls_score_fabu
% LAYER(072) is CONV(067), rpn_bbox_pred_fabu
% LAYER(073) is PROP(001), proposal
% LAYER(074) is ROIP(001), roi_pool_conv5
% LAYER(075) is FCON(001), fc6_L
% LAYER(076) is FCON(002), fc6_U
% LAYER(077) is FCON(003), fc7_L
% LAYER(078) is FCON(004), fc7_U
% LAYER(079) is FCON(005), cls_score_fabu
% LAYER(080) is FCON(006), bbox_pred_fabu


% NIF_DECV0 = [256,]';
% NOF_DECV0 = [256,]';
% NIX_DECV0 = [40,]';
% NIY_DECV0 = [66,]';
% NOX_DECV0 = [80,]';
% NOY_DECV0 = [132,]';
% ms_wr_output = 96*132*256/(10^6*11.2);   % 0.29 ms
% ms_compute = 96*132*256*4*4/(16*8*10^6); % 0.41 ms
% upsample + depthwise conv = 0.4 + 0.63 ms = 1.03 ms
% optimized depthwise conv = 0.6 ms

% 1) PVANET without bilinear, CONV                                        =  7.28 ms
% 2) PVANET with bilinear, CONV +  DLA2.0 depthwise    = 6.37+5.92 ms     = 12.29 ms
% 3) PVANET with bilinear, CONV + upsample + depthwise = 6.37+0.4+0.63 ms =  7.40 ms (proposed)
% 4) PVANET with bilinear, CONV + (deconv + depthwise) = 6.37+0.6 ms      =  6.97 ms (proposed)

