% Define the hardware size of DLA
% DO NOT change after the DLA RTL design is fixed

WD_PX = 8; % bit-width of pixels
WD_WT = 8; % bit-width of weights
WD_BSCV  = WD_PX; % bit-width of CONV bias
WD_BSFC  = WD_PX; % bit-width of FCON bias
WD_KXKY  = 4; % support max kernel size of 2^4-1 = 15
LAYER_ID_WIDTH = 10; % support up to 2^9 = 512 LAYERs in one CNN model

MAX_PAD1STR = 8; %support max(ceil(PAD_CONV/STR_CONV)) = 8

DMA_WIDTH = 256;
JTAG_WORDS = (512/DMA_WIDTH)*1024; % ram_JTAG_A words in JTAG_Read.v
JTAG_WIDTH = DMA_WIDTH; % ram_JTAG_A width in JTAG_Read.v

NUM_BK = 1; % MUST be 1 !!!
BUF_INPX_ALL = 8; % # of input buffers,  POY
BUF_OUPX_ALL = 8; % # of output buffers, POF/2, if HAS_EW, then BUF_OUPX_ALL <= BUF_INPX_ALL
BUF_INPX_1BK = BUF_INPX_ALL; 
BUF_OUPX_1BK = BUF_OUPX_ALL;

POX    = 16;  % 08!
POY    = 08; 
POF    = 2*BUF_OUPX_ALL;

%DMA_WIDTH_WT = floor(DMA_WIDTH/(WD_WT*POF))*(WD_WT*POF); % effective width
%POF_FC = POF*4*NUM_BK; %DMA_WIDTH_WT*NUM_BK/WD_WT;
POF_EWIS = BUF_OUPX_ALL; % BUF_INPX_ALL must >= BUF_OUPX_ALL !!!

POX_PLMX = 32; % POX_PL = PX_AD./STR_PL; !!!
POY_PLMX = 01; 
POF_PLMX = min(BUF_INPX_ALL,BUF_OUPX_ALL);

POX_NEAR = 8; % POX_PL = PX_AD./STR_PL; !!!
POY_NEAR = 01; 
POF_NEAR = min(BUF_INPX_ALL,BUF_OUPX_ALL);

NUM_POX_DMA = floor(2^(nextpow2(floor(DMA_WIDTH/WD_PX)/POX+0.00001)-1)); % is 2^power; NUM_PXBUF
PX_AD = NUM_POX_DMA*POX; % = 28
FCT_DMA = DMA_WIDTH/(PX_AD*WD_PX); % DMA datawidth = 512, 512/(4*POX*WD_PX) =32/28 WW
POX_2POWER = DMA_WIDTH/(NUM_POX_DMA*WD_PX);

% % Unroll LP3 and LP4
% Pkx = 01*ones(NUM_CONV,1);
% Pky = 01*ones(NUM_CONV,1);
% Pif = 01*ones(NUM_CONV,1);
% Pof = POF*ones(NUM_CONV,1);
% Px  = POX*ones(NUM_CONV,1);
% Py  = POY*ones(NUM_CONV,1);


% if (WD_WT*POF > 0*DMA_WIDTH && WD_WT*POF <= 1*DMA_WIDTH)
%     POF_FCON = POF*4*NUM_BK;
% end
% if (WD_WT*POF > 1*DMA_WIDTH && WD_WT*POF <= 2*DMA_WIDTH)
%     POF_FCON = POF*2*NUM_BK;
% end
% if (WD_WT*POF > 2*DMA_WIDTH && WD_WT*POF <= 4*DMA_WIDTH)
%     POF_FCON = POF*1*NUM_BK;
% end
POF_FCON = POF; % for DLA2.0, POF_FCON = POF = 32;

POF1OUPX  = POF/BUF_OUPX_ALL; % must be integer !!!
WD_RDCVWT = WD_WT*POF; % Buffer_WT read port width for CV weights
%WD_RDFCWT = WD_RDCVWT;

%% Buffer Sizes

% if 4*WD_RDCVWT == 1*(DMA_WIDTH*NUM_BK) : INWT_WD = WD_RDCVWT; DMA write RAM4, CV WT read RAM1,  FC WT read RAM4, POF_FCON = POF*4*NUM_BK;
% if 2*WD_RDCVWT == 1*(DMA_WIDTH*NUM_BK) : INWT_WD = WD_RDCVWT; DMA write RAM2, CV WT read RAM1,  FC WT read RAM4, POF_FCON = POF*4*NUM_BK;
% if 1*WD_RDCVWT == 1*(DMA_WIDTH*NUM_BK) : INWT_WD = WD_RDCVWT; DMA write RAM1, CV WT read RAM1,  FC WT read RAM4, POF_FCON = POF*4*NUM_BK;
% if 1*WD_RDCVWT == 2*(DMA_WIDTH*NUM_BK) : INWT_WD = DMA_WIDTH; DMA write RAM1, CV WT read RAM2,  FC WT read RAM4, POF_FCON = POF*2*NUM_BK;
% if 1*WD_RDCVWT == 4*(DMA_WIDTH*NUM_BK) : INWT_WD = DMA_WIDTH; DMA write RAM1, CV WT read RAM4,  FC WT read RAM4, POF_FCON = POF*1*NUM_BK;

RAM_BK = 4; % one buffer is built by 4 RAM banks

BUF_WEIGHT_WORDS = 4096*2; % RAM1 weight buffer depth
BUF_WEIGHT_WIDTH = POF*WD_WT; % RAM1 related to DMA_WIDTH and POF*WD_WT
BUF_WEIGHT_WDAD  = ceil(log2(BUF_WEIGHT_WORDS));

BUF_INPUT_WORDS = 2048/2; % RAM1 input buffer depth
BUF_INPUT_WIDTH = POX*WD_PX; % RAM1 input buffer width
BUF_INPUT_WDAD  = ceil(log2(BUF_INPUT_WORDS));

BUF_OUTPUT_WORDS = 2048/2; % RAM1 input buffer depth
BUF_OUTPUT_WIDTH = POX*WD_PX; % RAM1 input buffer width
BUF_OUTPUT_WDAD  = ceil(log2(BUF_OUTPUT_WORDS));

BUF_BIAS_CONV_WORDS = 4096;
BUF_BIAS_CONV_WIDTH = WD_BSCV*BUF_OUPX_ALL;
BUF_BIAS_CONV_WDAD  = ceil(log2(BUF_BIAS_CONV_WORDS));

BUF_BIAS_FCON_WORDS = 4096*8/POX; % assume max 8 FC layers each with 4096 outputs
BUF_BIAS_FCON_WIDTH = WD_BSFC*POX; % all fcon biases are stored in one buffer,
BUF_BIAS_FCON_WDAD  = ceil(log2(BUF_BIAS_FCON_WORDS));


if (BUF_WEIGHT_WIDTH/DMA_WIDTH > RAM_BK || BUF_WEIGHT_WIDTH/DMA_WIDTH < 1/RAM_BK)
    fprintf('Error: the weight buffer width cannot fit the DMA_WIDTH \n\n')
    Error
end
if ((POX*WD_PX)/DMA_WIDTH > RAM_BK || (POX*WD_PX)/DMA_WIDTH < 1/RAM_BK)
    fprintf('Error: the input/output buffer width cannot fit the DMA_WIDTH \n\n')
    Error
end



%%
fid = fopen('parameter_defines_pkg.sv','w');

fprintf(fid, '//Generated by %s.m offline \n\n\n', mfilename);

fprintf(fid, '`ifndef __PARAMETER_DEFINES_PKG_SV__\n');
fprintf(fid, '`define __PARAMETER_DEFINES_PKG_SV__\n\n');

fprintf(fid, '  package parameter_defines_pkg; \n\n\n');

fprintf(fid, '  localparam SIM_CTRL                               = 1''b0; \n');
fprintf(fid, '  localparam POX                                    = %02d; \n', POX);
fprintf(fid, '  localparam POY                                    = %02d; \n', POY);
fprintf(fid, '  localparam POF                                    = %02d; \n', POF);
fprintf(fid, '  localparam POX_PL                                 = %02d; \n', POX_PLMX);
fprintf(fid, '  localparam POY_PL                                 = %02d; \n', POY_PLMX);
fprintf(fid, '  localparam POF_PL                                 = %02d; \n', POF_PLMX);
fprintf(fid, '  localparam POF_EW                                 = %02d; \n', POF_EWIS);
fprintf(fid, '  localparam POF_FC                                 = %02d; \n', POF_FCON);
fprintf(fid, '  \n');
fprintf(fid, '  localparam PX_WD                                  = %02d; // include sign bit \n', WD_PX);
fprintf(fid, '  localparam KN_WD_CV                               = %02d; // include sign bit \n', WD_WT);
fprintf(fid, '  localparam KN_WD_FC                               = %02d; // include sign bit \n', WD_WT);
fprintf(fid, '  localparam WD_BSCV                                = %02d; // include sign bit \n', WD_BSCV);
fprintf(fid, '  localparam WD_BSFC                                = %02d; // include sign bit \n', WD_BSFC);
fprintf(fid, '  localparam WD_KXKY                                = %02d; // support max kernel size of 2^%d-1\n', WD_KXKY, WD_KXKY);
fprintf(fid, '  localparam MAC_ACCU_WD                            = 6; // additional bit for accumulation \n');
fprintf(fid, '  \n');
fprintf(fid, '  localparam PX_AD                                  = %d; //# of PX in one addr of INpx BUF \n',PX_AD);
fprintf(fid, '  localparam POX_2POWER                             = %d; \n',POX_2POWER);
fprintf(fid, '  localparam NUM_POX_DMA                            = %d; // = floor(DMA_WIDTH/(Px*WD_PX)) = 4 \n', NUM_POX_DMA);
fprintf(fid, '  localparam NUM_FC_BOX                             = %d; // # of parallel computed ROIs in FCON \n', NUM_FC_BOX);
fprintf(fid, '  localparam MAX_PAD1STR                            = %d; // support max(ceil(PAD_CONV/STR_CONV)) = 8\n', MAX_PAD1STR);
fprintf(fid, '  localparam POF1OUPX                               = %d; \n', POF1OUPX);
fprintf(fid, '  \n');
fprintf(fid, '  \n');
fprintf(fid, '  localparam BUF_INPX_ALL                           = %d; \n', BUF_INPX_ALL);
fprintf(fid, '  localparam BUF_OUPX_ALL                           = %d; \n', BUF_OUPX_ALL);
fprintf(fid, '  localparam BUF_INPX_1BK                           = %d; \n', BUF_INPX_1BK);
fprintf(fid, '  localparam BUF_OUPX_1BK                           = %d; \n', BUF_OUPX_1BK);
fprintf(fid, '  \n');
fprintf(fid, '  localparam INWT_WORDS                             = %d; //BUF_WEIGHT_WORDS            \n', BUF_WEIGHT_WORDS            );
fprintf(fid, '  localparam INWT_WDAD                              = %d; //BUF_WEIGHT_WDAD+log2(RAM_BK)\n', BUF_WEIGHT_WDAD+log2(RAM_BK));
fprintf(fid, '  localparam INWT_WD                                = %d; //BUF_WEIGHT_WIDTH            \n', BUF_WEIGHT_WIDTH            );
fprintf(fid, '  localparam INPX_WORDS                             = %d; //BUF_INPUT_WORDS             \n', BUF_INPUT_WORDS             );
fprintf(fid, '  localparam INPX_WDAD                              = %d; //BUF_INPUT_WDAD+log2(RAM_BK) \n', BUF_INPUT_WDAD+log2(RAM_BK) );
fprintf(fid, '  localparam INPX_WIDTH                             = %d; //BUF_INPUT_WIDTH             \n', BUF_INPUT_WIDTH             );
fprintf(fid, '  localparam OUPX_WORD                              = %d; //BUF_OUTPUT_WORDS            \n', BUF_OUTPUT_WORDS            );
fprintf(fid, '  localparam OUPX_WDAD                              = %d; //BUF_OUTPUT_WDAD+log2(RAM_BK)\n', BUF_OUTPUT_WDAD+log2(RAM_BK));
fprintf(fid, '  localparam OUPX_WIDTH                             = %d; //BUF_OUTPUT_WIDTH            \n', BUF_OUTPUT_WIDTH            );
fprintf(fid, '  \n');
fprintf(fid, '  localparam WORD_BSCV                              = %d; //BUF_BIAS_CONV_WORDS\n', BUF_BIAS_CONV_WORDS);
fprintf(fid, '  localparam WDAD_BSCV                              = %d; //BUF_BIAS_CONV_WDAD \n', BUF_BIAS_CONV_WDAD );
fprintf(fid, '  localparam WIDTH_BSCV                             = %d; //BUF_BIAS_CONV_WIDTH\n', BUF_BIAS_CONV_WIDTH);
fprintf(fid, '  localparam BUF_BIAS_FCON_WORDS                    = %d; //BUF_BIAS_FCON_WORDS\n', BUF_BIAS_FCON_WORDS);
fprintf(fid, '  localparam BUF_BIAS_FCON_WIDTH                    = %d; //BUF_BIAS_FCON_WIDTH\n', BUF_BIAS_FCON_WIDTH);
fprintf(fid, '  localparam BUF_BIAS_FCON_WDAD                     = %d; //BUF_BIAS_FCON_WDAD \n', BUF_BIAS_FCON_WDAD );
fprintf(fid, '  \n');
fprintf(fid, '  \n');
fprintf(fid, '  \n');
fprintf(fid, '//Proposal\n');
fprintf(fid, '  localparam AN_WD                                  = 16;\n');
fprintf(fid, '  localparam NUM_AN                                 = 64;\n');
fprintf(fid, '  localparam MAX_NUMBER_OF_ROI                      = 300;\n');
fprintf(fid, '  localparam NUM_BIT_NUM_ROI                        = $clog2(MAX_NUMBER_OF_ROI);\n');
fprintf(fid, '  localparam NUM_BIT_DDR_WORD                       =  5; //$clog2(DMA_WIDTH/PX_WD);\n');
fprintf(fid, '  localparam NOY_WRPX_BBOX_OB                       = 80; \n');
fprintf(fid, '  localparam NOY_WRPX_BBOX_TL                       = 144; \n');
fprintf(fid, '  \n');
fprintf(fid, '  \n');
fprintf(fid, '//Global Average Pooling\n');
fprintf(fid, '  localparam WD_ACCU_GAP                            = 16;\n');
fprintf(fid, '  localparam RSBIT_GAP                              = 16;\n');
fprintf(fid, '  localparam WD_DIV_GAP                             = 12;\n');
fprintf(fid, '  \n');
fprintf(fid, '  \n');
fprintf(fid, '  \n');
fprintf(fid, '//Control\n');
fprintf(fid, '  localparam DMA_ADDR_WIDTH                         = 36;\n');
fprintf(fid, '  localparam DMA_DATA_WIDTH                         = 256;\n');
fprintf(fid, '  localparam DMA_CMD_WIDTH                          = 71;\n');
fprintf(fid, '  localparam DMA_ADDR_OFFSET_WIDTH                  = 32;\n');
fprintf(fid, '  localparam DMA_DATA_SIZE_WIDTH                    = 32;\n');
fprintf(fid, '  localparam DMA_SID_WIDTH                          = 6;\n');
fprintf(fid, '  localparam MAP_CNT_WIDTH                          = 15;\n');
fprintf(fid, '  localparam MAP_GRP_CNT_WIDTH                      = 6;\n');
fprintf(fid, '  localparam TILE_CNT_WIDTH                         = 12;\n');
fprintf(fid, '  localparam LAYER_ID_WIDTH                         = %d; // bit width for LAYER ID \n',LAYER_ID_WIDTH);
fprintf(fid, '  localparam NUM_CONCAT_LAYER                       = 16; \n');
fprintf(fid, '  \n');
fprintf(fid, '  \n');
fprintf(fid, '  \n');
fprintf(fid, '//for AHB slave wrapper; SRAM selection parameter\n');
fprintf(fid, '  localparam AHB_DATA_WIDTH                         = 32;\n');
fprintf(fid, '  localparam AHB_RAM_DEC_ADDR_OFFSET                = ''h14000000 +''h20000;\n');
fprintf(fid, '  localparam NUM_RAM                                = 196;\n');
fprintf(fid, '  localparam NUM_RAM_DATA_ROUTER                    = 56;\n');
fprintf(fid, '  localparam NUM_RAM_COMPUTE_ARCH_MAC               = 57;\n');
fprintf(fid, '  localparam INPUT_BUF_RAM_SEL_OFFSET               = 0;\n');
fprintf(fid, '  localparam OUTPUT_BUF_RAM_SEL_OFFSET              = 64;\n');
fprintf(fid, '  localparam WEIGHT_BUF_RAM_SEL_OFFSET              = 128;\n');
fprintf(fid, '//localparam OUTPUT_BUF_FC_RAM_SEL_OFFSET           = 136;\n');
fprintf(fid, '//localparam DMA_CONTROL_RAM_SEL_BASE               = 141;  //Base DMA cotrol\n');
fprintf(fid, '//localparam DESCRIPTOR_WR_CV_RAM_SEL_OFFSET        = 0;\n');
fprintf(fid, '//localparam DESCRIPTOR_RD_CV_RAM_SEL_OFFSET        = 1;\n');
fprintf(fid, '//localparam DESCRIPTOR_WR_PL_RAM_SEL_OFFSET        = 2;\n');
fprintf(fid, '//localparam DESCRIPTOR_RD_PL_RAM_SEL_OFFSET        = 3;\n');
fprintf(fid, '//localparam DESCRIPTOR_SIZE_WR_CV_RAM_SEL_OFFSET   = 145;\n');
fprintf(fid, '//localparam DESCRIPTOR_SIZE_RD_CV_RAM_SEL_OFFSET   = 146;\n');
fprintf(fid, '//localparam DESCRIPTOR_SIZE_WR_PL_RAM_SEL_OFFSET   = 147;\n');
fprintf(fid, '//localparam DESCRIPTOR_SIZE_RD_PL_RAM_SEL_OFFSET   = 148;\n');
fprintf(fid, '//localparam ROI_RAM_SEL_OFFSET                     = 149;\n');
fprintf(fid, '  localparam BIAS_FC_RAM_SEL_OFFSET                 = 136;\n');
fprintf(fid, '  localparam COMPUTE_ARCH_MAC_RAM_SEL_BASE          = 137;  //Base compute_arc_mac\n');
fprintf(fid, '  localparam BIAS_CONV_RAM_SEL_OFFSET               = 0;\n');
fprintf(fid, '  localparam DATA_ROUTER_RAM_SEL_BASE               = 1;    //Base data_router\n');
fprintf(fid, '  localparam LINE_BUFFER_ROUTER_RAM_SEL_OFFSET      = 0;    \n');
fprintf(fid, '//localparam PADSHIFT_K07S2P3_RAM_SEL_OFFSET        = 56;\n');
fprintf(fid, '//localparam PADSHIFT_K03S1P1_RAM_SEL_OFFSET        = 80;\n');
fprintf(fid, '//localparam PADSHIFT_K06S2P1_RAM_SEL_OFFSET        = 88;\n');
fprintf(fid, '//localparam PADSHIFT_K05S1P2_RAM_SEL_OFFSET        = 96;\n');
fprintf(fid, '  localparam LAYER_LUT_RAM_SEL_OFFSET               = 194;\n');
fprintf(fid, '  localparam CONFIG_REG_RAM_SEL_OFFSET              = 195;\n');
fprintf(fid, '  \n');
fprintf(fid, '  \n');
fprintf(fid, '  endpackage \n\n');

fprintf(fid, '`endif \n\n');





% fprintf(fid,'`include "parameters_DPT.v" \n\n');







